/* eslint-disable */
/* autogenerated by openapi-superstruct */

import * as s from 'superstruct';

const struct_ModelOne = s.object({
  required_string: s.string(),
  required_nullable_string: s.nullable(s.string()),
  optional_string: s.optional(s.string()),
  optional_nullable_string: s.optional(s.nullable(s.string())),
  required_string_date: s.string(),
  required_nullable_string_date: s.nullable(s.string()),
  optional_string_date: s.optional(s.string()),
  optional_nullable_string_date: s.optional(s.nullable(s.string())),
  required_string_date-time: s.string(),
  required_nullable_string_date-time: s.nullable(s.string()),
  optional_string_date-time: s.optional(s.string()),
  optional_nullable_string_date-time: s.optional(s.nullable(s.string())),
  required_string_password: s.string(),
  required_nullable_string_password: s.nullable(s.string()),
  optional_string_password: s.optional(s.string()),
  optional_nullable_string_password: s.optional(s.nullable(s.string())),
  required_string_byte: s.string(),
  required_nullable_string_byte: s.nullable(s.string()),
  optional_string_byte: s.optional(s.string()),
  optional_nullable_string_byte: s.optional(s.nullable(s.string())),
  required_string_binary: s.string(),
  required_nullable_string_binary: s.nullable(s.string()),
  optional_string_binary: s.optional(s.string()),
  optional_nullable_string_binary: s.optional(s.nullable(s.string())),
  required_number: s.number(),
  required_nullable_number: s.nullable(s.number()),
  optional_number: s.optional(s.number()),
  optional_nullable_number: s.optional(s.nullable(s.number())),
  required_number_float: s.number(),
  required_nullable_number_float: s.nullable(s.number()),
  optional_number_float: s.optional(s.number()),
  optional_nullable_number_float: s.optional(s.nullable(s.number())),
  required_number_double: s.number(),
  required_nullable_number_double: s.nullable(s.number()),
  optional_number_double: s.optional(s.number()),
  optional_nullable_number_double: s.optional(s.nullable(s.number())),
  required_integer: s.integer(),
  required_nullable_integer: s.nullable(s.integer()),
  optional_integer: s.optional(s.integer()),
  optional_nullable_integer: s.optional(s.nullable(s.integer())),
  required_integer_int32: s.integer(),
  required_nullable_integer_int32: s.nullable(s.integer()),
  optional_integer_int32: s.optional(s.integer()),
  optional_nullable_integer_int32: s.optional(s.nullable(s.integer())),
  required_integer_int64: s.integer(),
  required_nullable_integer_int64: s.nullable(s.integer()),
  optional_integer_int64: s.optional(s.integer()),
  optional_nullable_integer_int64: s.optional(s.nullable(s.integer())),
  required_boolean: s.boolean(),
  required_nullable_boolean: s.nullable(s.boolean()),
  optional_boolean: s.optional(s.boolean()),
  optional_nullable_boolean: s.optional(s.nullable(s.boolean())),
});

export const structs = {
  ModelOne: struct_ModelOne,
};

export type ModelOne = s.Infer<typeof structs['ModelOne']>;
