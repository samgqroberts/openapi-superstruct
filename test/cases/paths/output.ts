/* eslint-disable */
/* autogenerated by openapi-superstruct */

import * as s from 'superstruct';

const struct_Thing = s.object({
  "id": s.integer(),
  "subthing_field": s.string(),
});
const struct_CreateThingRequest = s.object({
  "subthing_field": s.string(),
});
const struct_PatchThingRequest = s.object({
  "subthing_field": s.optional(s.string()),
});

export const structs = {
  "Thing": struct_Thing,
  "CreateThingRequest": struct_CreateThingRequest,
  "PatchThingRequest": struct_PatchThingRequest,
};

export type Thing = s.Infer<typeof structs['Thing']>;
export type CreateThingRequest = s.Infer<typeof structs['CreateThingRequest']>;
export type PatchThingRequest = s.Infer<typeof structs['PatchThingRequest']>;

interface PreparedGet {
  method: 'get';
  url: string;
}
interface PreparedPut<Body> {
  method: 'put';
  url: string;
  body: Body;
}
interface PreparedPost<Body> {
  method: 'post';
  url: string;
  body: Body;
}
interface PreparedDelete {
  method: 'delete';
  url: string;
}
interface PreparedPatch<Body> {
  method: 'patch';
  url: string;
  body: Body;
}

const path_get_things = (): PreparedGet => {
  const method = 'get';
  const url = '/things';
  return { method, url };
}
const path_create_thing = (createThingRequest: CreateThingRequest): PreparedPost<CreateThingRequest> => {
  const method = 'post';
  const url = '/things';
  const body = createThingRequest;
  return { method, url, body };
}
const path_get_thing = (id: number): PreparedGet => {
  const method = 'get';
  const url = '/things/{id}';
  return { method, url };
}
const path_delete_thing = (id: number): PreparedDelete => {
  const method = 'delete';
  const url = '/things/{id}';
  return { method, url };
}
const path_update_thing = (id: number, createThingRequest: CreateThingRequest): PreparedPut<CreateThingRequest> => {
  const method = 'put';
  const url = '/things/{id}';
  const body = createThingRequest;
  return { method, url, body };
}
const path_patch_thing = (id: number, patchThingRequest: PatchThingRequest): PreparedPatch<PatchThingRequest> => {
  const method = 'patch';
  const url = '/things/{id}';
  const body = patchThingRequest;
  return { method, url, body };
}
