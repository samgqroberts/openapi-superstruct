import { existsSync, writeFileSync } from 'fs';
import $RefParser from 'json-schema-ref-parser';
import { fileSync } from 'tmp';

export interface GenerateParams {
  input: string | object;
}

export async function generate({ input }: GenerateParams): Promise<string> {
  const spec = await parseInputOrThrow(input);
  const schemas = spec?.components?.schemas || {};
  const objects = Object.entries(schemas)
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    .map(([modelName, schema]: [string, any]) => {
      if (schema?.type === 'object') {
        const propertiesStr = Object.entries(schema.properties || {})
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          .map(([propertyName, type]: [string, any]) => {
            const sType = deriveSType(propertyName, type, schema.required);
            return `  ${propertyName}: ${sType},`;
          })
          .join('\n');
        return `export const s${modelName} = s.object({\n${propertiesStr}\n});`;
      }
      return '';
    })
    .join('\n');
  const file = `/* autogenerated by openapi-superstruct */

import * as s from 'superstruct';

${objects}
`;
  return file;
}

function deriveSType(
  propertyName: string,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  type: any,
  required: string[]
): string {
  if (!type) {
    return 's.unknown()';
  }
  const base = type.type;
  const isNullable = !!type.nullable;
  const isOptional = !required.includes(propertyName);
  const baseSType = (() => {
    if (base === 'string') return 's.string()';
    if (base === 'number') return 's.number()';
    if (base === 'integer') return 's.integer()';
    if (base === 'boolean') return 's.boolean()';
    return 's.unknown()';
  })();
  const consideringNullable = isNullable
    ? `s.nullable(${baseSType})`
    : baseSType;
  const consideringOptional = isOptional
    ? `s.optional(${consideringNullable})`
    : consideringNullable;
  return consideringOptional;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function parseInputOrThrow(input: string | object): Promise<any> {
  if (typeof input === 'object') {
    return parseInputObjectOrThrow(input);
  }
  if (existsSync(input)) {
    return parseInputFileOrThrow(input);
  }
  return parseInputStringOrThrow(input);
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const parseInputStringOrThrow = async (input: string): Promise<any> => {
  return parseInputObjectOrThrow(JSON.parse(input));
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any
async function parseInputObjectOrThrow(obj: object): Promise<any> {
  const { fd, name: path } = fileSync();
  writeFileSync(fd, JSON.stringify(obj));
  const schema = await $RefParser.bundle(path, path, {});
  return schema;
}

// eslint-disable-next-line @typescript-eslint/no-explicit-any
const parseInputFileOrThrow = async (location: string): Promise<any> => {
  try {
    const schema = await $RefParser.bundle(location, location, {});
    return schema;
  } catch (e) {
    throw new Error(JSON.stringify(e));
  }
};
