import { existsSync, writeFileSync } from 'fs'
import $RefParser from 'json-schema-ref-parser'
import { fileSync } from 'tmp'

export interface GenerateParams {
  input: string | object
}

export async function generate({
  input,
}: GenerateParams): Promise<string> {
  const spec = await parseInputOrThrow(input)
  const schemas = spec?.components?.schemas || {}
  const objects = Object.entries(schemas).map(([modelName, schema]: [string, any]) => {
    if (schema?.type === 'object') {
      const propertiesStr = Object.entries(schema.properties || {}).map(([propertyName, type]: [string, any]) => {
        const sType = type?.type === 'string' ? 's.string()' : 's.unknown()';
        return `  ${propertyName}: ${sType},`
      }).join('\n')
      return `export const s${modelName} = s.object({\n${propertiesStr}\n});`
    }
    return ''
  }).join('\n')
  const file = `/* autogenerated by openapi-superstruct */

import * as s from 'superstruct';

${objects}
`
  return file
}

async function parseInputOrThrow(input: string | object): Promise<any> {
  if (typeof input === 'object') {
    return parseInputObjectOrThrow(input);
  }
  if (existsSync(input)) {
    return parseInputFileOrThrow(input);
  }
  return parseInputStringOrThrow(input);
}

const parseInputStringOrThrow = async (input: string): Promise<any> => {
  return parseInputObjectOrThrow(JSON.parse(input));
}

async function parseInputObjectOrThrow(obj: object): Promise<any> {
  const { fd, name: path } = fileSync();
  writeFileSync(fd, JSON.stringify(obj))
  const schema = await $RefParser.bundle(path, path, {})
  return schema;
}

const parseInputFileOrThrow = async (location: string): Promise<any> => {
  try {
    const schema = await $RefParser.bundle(location, location, {})
    return schema;
  } catch (e) {
    throw new Error(JSON.stringify(e))
  }
}