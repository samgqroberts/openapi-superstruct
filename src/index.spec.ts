import { readFileSync } from 'fs';
import { fileSync } from 'tmp';

import { generate } from '.';

const expectedPetStoreFile = `/* eslint-disable */
/* autogenerated by openapi-superstruct */

import * as s from 'superstruct';

const struct_Pet = s.object({
  "id": s.integer(),
  "name": s.string(),
  "tag": s.optional(s.string()),
});
const struct_Pets = s.array(s.lazy(() => struct_Pet));
const struct_Error = s.object({
  "code": s.integer(),
  "message": s.string(),
});

export const structs = {
  "Pet": struct_Pet,
  "Pets": struct_Pets,
  "Error": struct_Error,
};

export type Pet = s.Infer<typeof structs['Pet']>;
export type Pets = s.Infer<typeof structs['Pets']>;
export type Error = s.Infer<typeof structs['Error']>;
`;

describe('generate', () => {
  describe('object input', () => {
    const input = {
      components: {
        schemas: {
          Model: {
            type: 'string'
          }
        }
      }
    };
    const expectedOutput = `/* eslint-disable */
/* autogenerated by openapi-superstruct */

import * as s from 'superstruct';

const struct_Model = s.string();

export const structs = {
  "Model": struct_Model,
};

export type Model = s.Infer<typeof structs['Model']>;
`;
    it('is allowed in generate', async () => {
      const file = await generate({ input });
      expect(file).toEqual(expectedOutput);
    });
    it('output parameter', async () => {
      const { name: path } = fileSync();
      await generate({ input, output: path });
      const outputFile = readFileSync(path).toString();
      expect(outputFile).toEqual(expectedOutput);
    });
  });
  describe('http input', () => {
    const input =
      'http://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/petstore.json';
    it('is allowed', async () => {
      const file = await generate({ input });
      expect(file).toEqual(expectedPetStoreFile);
    });
  });
  describe('https input', () => {
    const input =
      'https://raw.githubusercontent.com/OAI/OpenAPI-Specification/main/examples/v3.0/petstore.json';
    it('is allowed', async () => {
      const file = await generate({ input });
      expect(file).toEqual(expectedPetStoreFile);
    });
  });
});
